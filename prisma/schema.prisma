generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(uuid())
  email           String           @unique
  phone           String           @unique
  name            String
  role            UserRole         @default(UNASSIGNED)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  clerkUserId     String           @unique
  customerProfile CustomerProfile?
  jobsCreated     Job[]            @relation("CustomerJobs")
  jobsAssigned    Job[]            @relation("WorkerJobs")
  reviewsGiven    Review[]         @relation("ReviewsByCustomer")
  reviewsReceived Review[]         @relation("ReviewsForWorker")
  transactions    Transaction[]
  workerProfile   WorkerProfile?
}

model WorkerProfile {
  id               String   @id @default(uuid())
  userId           String   @unique
  skilledIn        String[]
  qualification    String?
  certificates     String[]
  aadharNumber     String   @unique
  yearsExperience  Int?
  profilePic       String?
  bio              String?
  city             String
  state            String
  country          String
  postalCode       String
  availableAreas   String[]
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  formattedAddress String?
  locality         String?
  placeId          String?
  streetName       String?
  streetNumber     String?
  sublocality      String?
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CustomerProfile {
  id               String   @id @default(uuid())
  userId           String   @unique
  city             String
  state            String
  country          String
  postalCode       String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  formattedAddress String?
  locality         String?
  placeId          String?
  streetName       String?
  streetNumber     String?
  sublocality      String?
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Job {
  id          String        @id @default(uuid())
  description String
  details     String?
  date        DateTime
  time        DateTime
  location    String
  charge      Float
  status      JobStatus     @default(PENDING)
  customerId  String
  workerId    String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  customer    User          @relation("CustomerJobs", fields: [customerId], references: [id])
  worker      User?         @relation("WorkerJobs", fields: [workerId], references: [id])
  review      Review?
  Transaction Transaction[]

  @@index([customerId, status])
  @@index([workerId, status])
}

model Transaction {
  id        String          @id @default(uuid())
  userId    String
  jobId     String?
  amount    Float
  type      TransactionType
  createdAt DateTime        @default(now())
  job       Job?            @relation(fields: [jobId], references: [id])
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Review {
  id         String   @id @default(uuid())
  jobId      String   @unique
  customerId String
  workerId   String
  rating     Int
  comment    String?
  createdAt  DateTime @default(now())
  customer   User     @relation("ReviewsByCustomer", fields: [customerId], references: [id])
  job        Job      @relation(fields: [jobId], references: [id])
  worker     User     @relation("ReviewsForWorker", fields: [workerId], references: [id])
}

enum UserRole {
  CUSTOMER
  WORKER
  UNASSIGNED
}

enum JobStatus {
  PENDING
  ACCEPTED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum TransactionType {
  PAYMENT
  PAYOUT
  REFUND
}
