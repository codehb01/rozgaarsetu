generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  clerkUserId       String    @unique // Clerk's user ID
  email     String   @unique
  phone     String   @unique
  name      String
  role      UserRole @default(UNASSIGNED) // CUSTOMER | WORKER | ADMIN
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  workerProfile   WorkerProfile?
  customerProfile CustomerProfile?
  jobsCreated     Job[]            @relation("CustomerJobs")
  jobsAssigned    Job[]            @relation("WorkerJobs")
  transactions    Transaction[]
  reviewsGiven    Review[]         @relation("ReviewsByCustomer")
  reviewsReceived Review[]         @relation("ReviewsForWorker")
  subscription    UserSubscription?
  usageTracking   UsageTracking[]
}

enum UserRole {
  CUSTOMER
  WORKER
  UNASSIGNED
}

model WorkerProfile {
  id     String @id @default(uuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  skilledIn       String[] // plumber, electrician, etc.
  qualification   String?
  certificates    String[] // file URLs
  aadharNumber    String   @unique
  yearsExperience Int?
  profilePic      String?
  bio             String?

  address        String
  city           String
  state          String
  country        String
  postalCode     String
  availableAreas String[] // list of areas where worker can work

  // Optional geographic coordinates for proximity search
  latitude      Float?
  longitude     Float?

   hourlyRate   Float?   // Optional, in your preferred currency
  minimumFee   Float?   // Optional, base fee after booking acceptance

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt


  // New relation
  previousWorks PreviousWork[]
}

model PreviousWork {
  id          String   @id @default(uuid())
  workerId    String
  worker      WorkerProfile @relation(fields: [workerId], references: [id], onDelete: Cascade)

  title       String?   // Optional title for the work (e.g., "Pipe Repair Project")
  description String?   // Optional description
  images      String[]  // Array of image URLs
  location    String?   // Optional location name

  createdAt   DateTime @default(now())
}


model CustomerProfile {
  id     String @id @default(uuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  address    String
  city       String
  state      String
  country    String
  postalCode String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Job {
  id          String    @id @default(uuid())
  description String
  details     String?
  date        DateTime
  time        DateTime
  location    String
  charge      Float
  status      JobStatus @default(PENDING)

  // Relations
  customerId String
  customer   User   @relation("CustomerJobs", fields: [customerId], references: [id])

  workerId String?
  worker   User?   @relation("WorkerJobs", fields: [workerId], references: [id])

  review Review?

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  Transaction Transaction[]

  @@index([customerId, status])
  @@index([workerId, status])
}

enum JobStatus {
  PENDING
  ACCEPTED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model Transaction {
  id        String          @id @default(uuid())
  userId    String
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  jobId     String?
  job       Job?            @relation(fields: [jobId], references: [id])
  amount    Float
  type      TransactionType
  createdAt DateTime        @default(now())
}

enum TransactionType {
  PAYMENT // customer payment for job
  PAYOUT // worker withdrawal
  REFUND // refund to customer
}

model Review {
  id    String @id @default(uuid())
  jobId String @unique
  job   Job    @relation(fields: [jobId], references: [id])

  customerId String
  customer   User   @relation("ReviewsByCustomer", fields: [customerId], references: [id])

  workerId String
  worker   User   @relation("ReviewsForWorker", fields: [workerId], references: [id])

  rating  Int // 1–5 stars
  comment String?

  createdAt DateTime @default(now())
}

// Subscription and Usage Tracking Models
model UserSubscription {
  id     String @id @default(uuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  planType    PlanType @default(FREE)
  planExpiry  DateTime?
  isActive    Boolean  @default(true)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, planType])
}

model UsageTracking {
  id     String @id @default(uuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Monthly tracking
  month             Int // 1-12
  year              Int
  
  // Customer metrics
  monthlyBookings   Int @default(0) // jobs created by customer
  
  // Worker metrics  
  monthlyLeads      Int @default(0) // leads received (job applications)
  completedJobs     Int @default(0) // jobs completed by worker
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, month, year])
  @@index([userId, year, month])
}

enum PlanType {
  FREE
  BOOST    // Worker boost plan ₹199
  PRO      // Customer pro ₹499 or Worker pro ₹199
}
